function net=deepsupernet()
net.layers = {} ;
filters_num1=64;
lr=0.001;
initialBias=0.001;
k1=0.01;
net.layers{end+1} = struct('type', 'conv',...
                          'weights', {{k1 * randn(3, 3,1,filters_num1,'single'),zeros(1, filters_num1,'single')}},...
                          'stride',1, 'pad', 0, 'filtersLearningRate', lr, 'biasesLearningRate', lr, 'filtersWeightDecay', 1,...
                          'biasesWeightDecay', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv',...
                          'weights', {{k1 * randn(3, 3,1,filters_num1,'single'),zeros(1,filters_num1,'single')}},...
                          'stride',1, 'pad', 0, 'filtersLearningRate', lr, 'biasesLearningRate', lr, 'filtersWeightDecay', 1,...
                          'biasesWeightDecay', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv',...
                          'weights', {{k1 * randn(3, 3,1,filters_num1,'single'),zeros(1,filters_num1,'single')}},...
                          'stride',1, 'pad', 0, 'filtersLearningRate', lr, 'biasesLearningRate', lr, 'filtersWeightDecay', 1,...
                          'biasesWeightDecay', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv',...
                          'weights', {{k1 * randn(3, 3,1,filters_num1,'single'),zeros(1,filters_num1,'single')}},...
                          'stride',1, 'pad', 0, 'filtersLearningRate', lr, 'biasesLearningRate', lr, 'filtersWeightDecay', 1,...
                          'biasesWeightDecay', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv',...
                          'weights', {{k1 * randn(3, 3,1,filters_num1,'single'),zeros(1,filters_num1,'single')}},...
                          'stride',1, 'pad', 0, 'filtersLearningRate', lr, 'biasesLearningRate', lr, 'filtersWeightDecay', 1,...
                          'biasesWeightDecay', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv',...
                          'weights', {{k1 * randn(3, 3,1,1,filters_num1,'single'),zeros(1,filters_num1,'single')}},...
                          'stride',1, 'pad', 0, 'filtersLearningRate', lr, 'biasesLearningRate', lr, 'filtersWeightDecay', 1,...
                          'biasesWeightDecay', 0) ;

net.layers{end+1} = struct('type', 'softmaxloss') ;
net.meta.inputSize = [33 33 1 1];
net = vl_simplenn_tidy(net);
net.layers{end}.class=ones(21,21);
end